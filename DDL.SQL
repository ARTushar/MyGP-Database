
CREATE TABLE PACKAGE (
  PACKAGE_ID NUMERIC PRIMARY KEY,
  PACKAGE_NAME VARCHAR (40) NOT NULL,
  CALL_RATE NUMERIC NOT NULL,
  SMS_RATE NUMERIC NOT NULL,
  FNF_LIMIT NUMERIC NOT NULL
);

CREATE TABLE VOUCHERS(
  VOUCHER_ID NUMERIC PRIMARY KEY,
  CODE NUMERIC NOT NULL,
  VALIDITY NUMERIC NOT NULL,
  DESCRIPTION VARCHAR (200) NOT NULL
);

CREATE TABLE OFFERS (
  OFFER_ID NUMERIC PRIMARY KEY,
  PRICE NUMERIC,
  VALIDITY NUMERIC NOT NULL,
  REWARD_POINTS NUMERIC
);

CREATE TABLE REWARD_OFFER (
  POINTS_NEED NUMERIC NOT NULL,
  MB_AMOUNT NUMERIC NOT NULL
) INHERITS (OFFERS);

CREATE TABLE SMS_OFFER
(
	SMS_AMOUNT NUMERIC NOT NULL
) INHERITS (OFFERS);

CREATE TABLE INTERNET_OFFER(
  DATA_AMOUNT NUMERIC NOT NULL
) INHERITS (OFFERS);

CREATE TABLE TALK_TIME_OFFER(
  TALK_TIME NUMERIC NOT NULL
) INHERITS (OFFERS);

CREATE TABLE GENERAL_OFFER (
  MUNITE NUMERIC,
  MB_AMOUNT NUMERIC,
  SMS_AMOUNT NUMERIC
) INHERITS (OFFERS);

CREATE TABLE STAR (
  STAR_ID NUMERIC PRIMARY KEY,
  TYPE VARCHAR (20) NOT NULL,
  AVERAGE_USES NUMERIC NOT NULL,
  VALIDITY NUMERIC NOT NULL
);

CREATE TABLE STARS_OFFER (
  OFFER_ID NUMERIC PRIMARY KEY,
  OFFER_NAME VARCHAR(40) NOT NULL,
  TITLE VARCHAR (40) NOT NULL,
  DESCRIPTION VARCHAR (200),
  STAR_ID NUMERIC NOT NULL,
  CONSTRAINT STAR_FK FOREIGN KEY (STAR_ID)
    REFERENCES STAR (STAR_ID)
);

CREATE TABLE USERS (
  MOBILE_NUMBER NUMERIC PRIMARY KEY,
  BALANCE NUMERIC NOT NULL,
  TOTAL_MB NUMERIC,
  TOTAL_REWARD_POINT NUMERIC,
  EMERGENCY_BALANCE_DUE NUMERIC,
  USER_NAME VARCHAR(40) NOT NULL,
  TOTAL_TALK_TIME NUMERIC,
  TOTAL_OFFER_SMS NUMERIC,
  PACKAGE_ID NUMERIC UNIQUE NOT NULL,
  STAR_ID NUMERIC,
  STAR_DATE TIMESTAMP,
  CONSTRAINT PACKAGE_FK FOREIGN KEY (PACKAGE_ID)
    REFERENCES PACKAGE (PACKAGE_ID) ,
  CONSTRAINT STAR_FK FOREIGN KEY (STAR_ID)
    REFERENCES STAR (STAR_ID)
);


CREATE TABLE USER_VOUCHER (
  USER_ID NUMERIC NOT NULL,
  VOUCHER_ID NUMERIC PRIMARY KEY,
  CONSTRAINT USER_FK FOREIGN KEY (USER_ID)
    REFERENCES USERS (MOBILE_NUMBER),
  CONSTRAINT VOUCHER_FK FOREIGN KEY (VOUCHER_ID)
    REFERENCES VOUCHERS (VOUCHER_ID)
);

CREATE TABLE LINK (
  LINKED_BY NUMERIC NOT NULL,
  LINKED_TO NUMERIC NOT NULL,
  PRIMARY KEY(LINKED_BY, LINKED_TO),
  CONSTRAINT LINKED_BY_FK FOREIGN KEY (LINKED_BY)
    REFERENCES USERS (MOBILE_NUMBER),
  CONSTRAINT LINKED_TO_FK FOREIGN KEY (LINKED_TO)
    REFERENCES USERS(MOBILE_NUMBER)
);


CREATE TABLE FNF (
  FNF_BY NUMERIC NOT NULL,
  FNF_TO NUMERIC NOT NULL,
  PRIMARY KEY(FNF_BY, FNF_TO),
  CONSTRAINT FNF_BY_FK FOREIGN KEY (FNF_BY)
    REFERENCES USERS (MOBILE_NUMBER),
  CONSTRAINT FNF_TO_FK FOREIGN KEY (FNF_TO)
    REFERENCES USERS(MOBILE_NUMBER)
);

CREATE TABLE PURCHASE_OFFER(
  USER_ID NUMERIC NOT NULL,
  OFFER_ID NUMERIC NOT NULL,
  PURCHASE_DATE TIMESTAMP NOT NULL,
  PRIMARY KEY(USER_ID, OFFER_ID),
  CONSTRAINT USER_ID_FK FOREIGN KEY (USER_ID)
    REFERENCES USERS (MOBILE_NUMBER),
  CONSTRAINT OFFER_ID_FK FOREIGN KEY (OFFER_ID)
    REFERENCES OFFERS(OFFER_ID)
);


CREATE TABLE HISTORY(
  H_DATE TIMESTAMP NOT NULL,
  USER_ID NUMERIC PRIMARY KEY,
  CONSTRAINT USER_FK FOREIGN KEY (USER_ID)
    REFERENCES USERS (MOBILE_NUMBER)
);

CREATE TABLE RECHARGE_HISTORY(
  AMOUNT NUMERIC NOT NULL,
  VALIDITY NUMERIC NOT NULL
) INHERITS (HISTORY);

CREATE TABLE INTERNET_HISTORY(
  MB_USED NUMERIC NOT NULL
) INHERITS (HISTORY);

CREATE TABLE SMS_HISTORY(
  SMS_NUMBER NUMERIC NOT NULL,
  COST NUMERIC NOT NULL,
  TYPE VARCHAR (40) NOT NULL
) INHERITS (HISTORY);

CREATE TABLE CALL_HISTORY(
  CALL_NUMBER NUMERIC NOT NULL,
  COST NUMERIC NOT NULL,
  TYPE VARCHAR (40) NOT NULL
) INHERITS (HISTORY);

CREATE TABLE EMERGENCY_BALANCE(
  USER_ID NUMERIC PRIMARY KEY,
  AMOUNT NUMERIC NOT NULL,
  TAKEN_DATE TIMESTAMP NOT NULL,
  VALIDITY NUMERIC NOT NULL,
  CONSTRAINT USER_FK FOREIGN KEY (USER_ID)
    REFERENCES USERS (MOBILE_NUMBER)
);

CREATE TABLE NOTIFICATIONS(
  USER_ID NUMERIC PRIMARY KEY,
  MESSAGE VARCHAR (200) NOT NULL,
  CONSTRAINT USER_FK FOREIGN KEY (USER_ID)
    REFERENCES USERS (MOBILE_NUMBER)
);


drop table mygp_schema.recharge_history;

drop table mygp_schema.internet_history;

drop table mygp_schema.sms_history;

drop table mygp_schema.call_history;

drop table mygp_schema.history;

drop table mygp_schema.reward_offer;

drop table mygp_schema.sms_offer;

drop table mygp_schema.internet_offer;

drop table mygp_schema.talk_time_offer;

drop table mygp_schema.general_offer;

drop table mygp_schema.purchase_offer;

drop table mygp_schema.offers;

drop table mygp_schema.stars_offer;

drop table mygp_schema.user_voucher;

drop table mygp_schema.vouchers;

drop table mygp_schema.link;

drop table mygp_schema.fnf;


drop table mygp_schema.emergency_balance;

drop table mygp_schema.notifications;

drop table mygp_schema.users;

drop table mygp_schema.star;

drop table mygp_schema.package;


INSERT INTO INTERNET_OFFER (OFFER_ID, PRICE, VALIDITY, REWARD_POINTS, DATA_AMOUNT) VALUES
(100, 56, 30, NULL, 115),
(101, 31, 3, 25, 252);

INSERT INTO TALK_TIME_OFFER (OFFER_ID, PRICE, VALIDITY, REWARD_POINTS, TALK_TIME) VALUES
(200, 140, 7, NULL, 250),
(201, 30, 1, NULL, 50);

INSERT INTO SMS_OFFER (OFFER_ID, PRICE, VALIDITY, REWARD_POINTS, SMS_AMOUNT) VALUES
(300, 10, 2, NULL, 20);

INSERT INTO PACKAGE (PACKAGE_ID, PACKAGE_NAME, CALL_RATE, SMS_RATE, FNF_LIMIT) VALUES
(10, 'BONDHU', 27.5, 50, 18),
(11, 'NISHCHINTO', 22, 50, 0),
(12, 'DJUICE', 22, 50, 13);

INSERT INTO STAR VALUES (1, 'PLATINUM_PLUS', 4000, 180);
INSERT INTO STAR VALUES (2, 'PLATINUM', 3000, 180);
INSERT INTO STAR VALUES (3, 'GOLD', 2500, 180);
INSERT INTO STAR VALUES (4, 'SILVER', 2000, 180);

INSERT INTO USERS VALUES
(01755840785, 13.4, 10, 185, 0, 'RAJU', 0, 0, 10, NULL, NULL),
(01787571129, 20.9, 50, 200, 0, 'TUSHAR', 5, 10, 11, 1, NULL);

CREATE OR REPLACE PROCEDURE RECHARGE_ACCOUNT(IN MOB_NUMBER NUMERIC, IN AMOUNT NUMERIC) AS $$
  DECLARE
  OLD_AMOUNT NUMERIC;
  CUR_TIMESTAMP TIMESTAMP;
  VALIDITY NUMERIC;
  END_DATE CHAR;
  BEGIN
    SELECT BALANCE FROM USERS WHERE MOBILE_NUMBER = MOB_NUMBER INTO OLD_AMOUNT;
    CUR_TIMESTAMP := NOW();
    VALIDITY := FIND_RECHARGE_LAST_DATE(AMOUNT);
    END_DATE := TO_CHAR(CUR_TIMESTAMP + '1 DAY' * VALIDITY:: DATE, 'YYYY-MM-DD HH12:MI:SS AM');
    INSERT INTO RECHARGE_HISTORY VALUES (CUR_TIMESTAMP, MOB_NUMBER, AMOUNT, VALIDITY);
    INSERT INTO USERS(BALANCE) VALUES (OLD_AMOUNT + AMOUNT);
    INSERT INTO NOTIFICATIONS
    VALUES (MOB_NUMBER, 'YOU HAVE SUCCESSFULLY RECHARGED ' ||
    AMOUNT || ' TAKA IN YOUR ACCOUNT BALANCE. YOUR CURRENT ACCOUNT BALANCE IS '
    || OLD_AMOUNT+ AMOUNT || ' TAKA. YOUR BALANCE WILL BE EXPIRED ON '|| END_DATE);
    RAISE NOTICE 'SUCCESSFULLY RECHARGED % TAKA IN THE ACCOUNT', AMOUNT;
  EXCEPTION WHEN OTHERS THEN
    RAISE NOTICE 'CANNOT INSERT THE UPDATED INFO INTO THE RECHARGE_HISTORY OR USERS OR NOTIFICATIONS :(';
  END;
  $$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION FIND_RECHARGE_LAST_DATE(IN AMOUNT NUMERIC) RETURNS NUMERIC AS $$
  DECLARE
  VALID_DAYS NUMERIC;
    BEGIN
    IF(AMOUNT < 50) THEN
      VALID_DAYS := 30;
      ELSEIF(AMOUNT < 100) THEN VALID_DAYS := 60;
      ELSE VALID_DAYS := 90;
    end if;
    RETURN VALID_DAYS;
  end;
  $$ LANGUAGE PLPGSQL;

CREATE OR REPLACE PROCEDURE PURCHASE_SMS_OFFER(IN OFFER_NO NUMERIC, IN USER_NO NUMERIC) AS $$
  DECLARE
    PURCHASED_TIMESTAMP TIMESTAMP;
  BEGIN
    PURCHASED_TIMESTAMP := NOW();
    INSERT INTO PURCHASE_OFFER VALUES (USER_NO, OFFER_NO,PURCHASED_TIMESTAMP);
    INSERT INTO NOTIFICATIONS VALUES (USER_NO, 'YOU HAVE SUCCESSFULLY PURCHASED THE SMS ');

  end;
  $$ LANGUAGE PLPGSQL;

/*SELECT * FROM PG_TIMEZONE_NAMES;
ALTER DATABASE postgres SET TIMEZONE TO 'Asia/Dhaka';
DO $$
BEGIN
RAISE NOTICE 'THE current MONTH DATE AND TIME IS %',TO_CHAR((NOW()), 'YYYY-MM-DD HH12:MI:SS PM');
END;
  $$
*/



